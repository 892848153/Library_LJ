// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: wire/wire.proto at 6:1
package com.lj.library.bean.serialization;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;

import java.io.IOException;
import java.util.List;

import okio.ByteString;

public final class WirePerson extends Message<WirePerson, WirePerson.Builder> {
    public static final ProtoAdapter<WirePerson> ADAPTER = new ProtoAdapter_WirePerson();

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_NAME = "";

    public static final Integer DEFAULT_ID = 0;

    public static final String DEFAULT_EMAIL = "";

    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String name;

    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer id;

    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String email;

    @WireField(
            tag = 4,
            adapter = "com.lj.library.bean.serialization.WirePerson$PhoneNumber#ADAPTER",
            label = WireField.Label.REPEATED
    )
    public final List<PhoneNumber> phoneNumber;

    public WirePerson(String name, Integer id, String email, List<PhoneNumber> phoneNumber) {
        this(name, id, email, phoneNumber, ByteString.EMPTY);
    }

    public WirePerson(String name, Integer id, String email, List<PhoneNumber> phoneNumber, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.name = name;
        this.id = id;
        this.email = email;
        this.phoneNumber = Internal.immutableCopyOf("phoneNumber", phoneNumber);
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.name = name;
        builder.id = id;
        builder.email = email;
        builder.phoneNumber = Internal.copyOf("phoneNumber", phoneNumber);
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof WirePerson)) return false;
        WirePerson o = (WirePerson) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(name, o.name)
                && Internal.equals(id, o.id)
                && Internal.equals(email, o.email)
                && phoneNumber.equals(o.phoneNumber);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (name != null ? name.hashCode() : 0);
            result = result * 37 + (id != null ? id.hashCode() : 0);
            result = result * 37 + (email != null ? email.hashCode() : 0);
            result = result * 37 + phoneNumber.hashCode();
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (name != null) builder.append(", name=").append(name);
        if (id != null) builder.append(", id=").append(id);
        if (email != null) builder.append(", email=").append(email);
        if (!phoneNumber.isEmpty()) builder.append(", phoneNumber=").append(phoneNumber);
        return builder.replace(0, 2, "WirePerson{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<WirePerson, Builder> {
        public String name;

        public Integer id;

        public String email;

        public List<PhoneNumber> phoneNumber;

        public Builder() {
            phoneNumber = Internal.newMutableList();
        }

        public Builder name(String name) {
            this.name = name;
            return this;
        }

        public Builder id(Integer id) {
            this.id = id;
            return this;
        }

        public Builder email(String email) {
            this.email = email;
            return this;
        }

        public Builder phoneNumber(List<PhoneNumber> phoneNumber) {
            Internal.checkElementsNotNull(phoneNumber);
            this.phoneNumber = phoneNumber;
            return this;
        }

        @Override
        public WirePerson build() {
            return new WirePerson(name, id, email, phoneNumber, super.buildUnknownFields());
        }
    }

    public enum PhoneType implements WireEnum {
        MOBILE(0),

        HOME(1),

        WORK(2);

        public static final ProtoAdapter<PhoneType> ADAPTER = ProtoAdapter.newEnumAdapter(PhoneType.class);

        private final int value;

        PhoneType(int value) {
            this.value = value;
        }

        /**
         * Return the constant for {@code value} or null.
         */
        public static PhoneType fromValue(int value) {
            switch (value) {
                case 0:
                    return MOBILE;
                case 1:
                    return HOME;
                case 2:
                    return WORK;
                default:
                    return null;
            }
        }

        @Override
        public int getValue() {
            return value;
        }
    }

    public static final class PhoneNumber extends Message<PhoneNumber, PhoneNumber.Builder> {
        public static final ProtoAdapter<PhoneNumber> ADAPTER = new ProtoAdapter_PhoneNumber();

        private static final long serialVersionUID = 0L;

        public static final String DEFAULT_NUMBER = "";

        public static final PhoneType DEFAULT_TYPE = PhoneType.MOBILE;

        @WireField(
                tag = 1,
                adapter = "com.squareup.wire.ProtoAdapter#STRING"
        )
        public final String number;

        @WireField(
                tag = 2,
                adapter = "com.lj.library.bean.serialization.WirePerson$PhoneType#ADAPTER"
        )
        public final PhoneType type;

        public PhoneNumber(String number, PhoneType type) {
            this(number, type, ByteString.EMPTY);
        }

        public PhoneNumber(String number, PhoneType type, ByteString unknownFields) {
            super(ADAPTER, unknownFields);
            this.number = number;
            this.type = type;
        }

        @Override
        public Builder newBuilder() {
            Builder builder = new Builder();
            builder.number = number;
            builder.type = type;
            builder.addUnknownFields(unknownFields());
            return builder;
        }

        @Override
        public boolean equals(Object other) {
            if (other == this) return true;
            if (!(other instanceof PhoneNumber)) return false;
            PhoneNumber o = (PhoneNumber) other;
            return unknownFields().equals(o.unknownFields())
                    && Internal.equals(number, o.number)
                    && Internal.equals(type, o.type);
        }

        @Override
        public int hashCode() {
            int result = super.hashCode;
            if (result == 0) {
                result = unknownFields().hashCode();
                result = result * 37 + (number != null ? number.hashCode() : 0);
                result = result * 37 + (type != null ? type.hashCode() : 0);
                super.hashCode = result;
            }
            return result;
        }

        @Override
        public String toString() {
            StringBuilder builder = new StringBuilder();
            if (number != null) builder.append(", number=").append(number);
            if (type != null) builder.append(", type=").append(type);
            return builder.replace(0, 2, "PhoneNumber{").append('}').toString();
        }

        public static final class Builder extends Message.Builder<PhoneNumber, Builder> {
            public String number;

            public PhoneType type;

            public Builder() {
            }

            public Builder number(String number) {
                this.number = number;
                return this;
            }

            public Builder type(PhoneType type) {
                this.type = type;
                return this;
            }

            @Override
            public PhoneNumber build() {
                return new PhoneNumber(number, type, super.buildUnknownFields());
            }
        }

        private static final class ProtoAdapter_PhoneNumber extends ProtoAdapter<PhoneNumber> {
            ProtoAdapter_PhoneNumber() {
                super(FieldEncoding.LENGTH_DELIMITED, PhoneNumber.class);
            }

            @Override
            public int encodedSize(PhoneNumber value) {
                return (value.number != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.number) : 0)
                        + (value.type != null ? PhoneType.ADAPTER.encodedSizeWithTag(2, value.type) : 0)
                        + value.unknownFields().size();
            }

            @Override
            public void encode(ProtoWriter writer, PhoneNumber value) throws IOException {
                if (value.number != null)
                    ProtoAdapter.STRING.encodeWithTag(writer, 1, value.number);
                if (value.type != null) PhoneType.ADAPTER.encodeWithTag(writer, 2, value.type);
                writer.writeBytes(value.unknownFields());
            }

            @Override
            public PhoneNumber decode(ProtoReader reader) throws IOException {
                Builder builder = new Builder();
                long token = reader.beginMessage();
                for (int tag; (tag = reader.nextTag()) != -1; ) {
                    switch (tag) {
                        case 1:
                            builder.number(ProtoAdapter.STRING.decode(reader));
                            break;
                        case 2: {
                            try {
                                builder.type(PhoneType.ADAPTER.decode(reader));
                            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
                                builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
                            }
                            break;
                        }
                        default: {
                            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                            builder.addUnknownField(tag, fieldEncoding, value);
                        }
                    }
                }
                reader.endMessage(token);
                return builder.build();
            }

            @Override
            public PhoneNumber redact(PhoneNumber value) {
                Builder builder = value.newBuilder();
                builder.clearUnknownFields();
                return builder.build();
            }
        }
    }

    private static final class ProtoAdapter_WirePerson extends ProtoAdapter<WirePerson> {
        ProtoAdapter_WirePerson() {
            super(FieldEncoding.LENGTH_DELIMITED, WirePerson.class);
        }

        @Override
        public int encodedSize(WirePerson value) {
            return (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) : 0)
                    + (value.id != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.id) : 0)
                    + (value.email != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.email) : 0)
                    + PhoneNumber.ADAPTER.asRepeated().encodedSizeWithTag(4, value.phoneNumber)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, WirePerson value) throws IOException {
            if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
            if (value.id != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.id);
            if (value.email != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.email);
            PhoneNumber.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.phoneNumber);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public WirePerson decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.name(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 2:
                        builder.id(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 3:
                        builder.email(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 4:
                        builder.phoneNumber.add(PhoneNumber.ADAPTER.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public WirePerson redact(WirePerson value) {
            Builder builder = value.newBuilder();
            Internal.redactElements(builder.phoneNumber, PhoneNumber.ADAPTER);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
