<resources>    <!-- 加入项目的minSdk比较低，那么高版本的属性直接写在values/styles.xml中其实也可以，只要加上tools:ignore="NewApi"        比如 <item name="android:windowEnterTransition" tools:ignore="NewApi">@transition/explode</item>-->    <style name="AppTheme" parent="AppBaseTheme">        <!-- true:顶部状态栏会有黑色半透明的背景图层 false:纯色背景 默认是false.                     为false时<item name="android:statusBarColor">@android:color/transparent</item>                     属性才生效，才能更改状态栏背景颜色。                     为true时，页面布局会跑到“状态栏”底部那里形成布局覆盖，可以在根布局设置属性fitsSystemWindows为true来避免布局覆盖。-->        <item name="android:windowTranslucentStatus">false</item>        <!--true:华为，索尼等手机底下的导航栏会有黑色半透明的背景图层 false:纯色背景,一般是黑色  默认是false。            为true时，页面布局会跑到“导航栏”的底部那里形成布局覆盖，页面布局顶部也会延伸到“状态栏”底部形成布局覆盖，            即使android:windowTranslucentStatus为false，布局也会延伸到“状态栏底部。            可以在根布局设置属性fitsSystemWindows为true来避免布局覆盖。-->        <item name="android:windowTranslucentNavigation">false</item>        <!-- 5.0系统开始才有的属性，设置“状态栏”颜色，只有windowTranslucentStatus为false时才生效-->       <!-- <item name="android:statusBarColor">@color/colorPrimaryDark</item>-->        <!-- 5.0系统开始才有的属性，设置“导航栏”颜色，只有windowTranslucentNavigation为false时才生效-->        <!-- <item name="android:navigationBarColor">@color/colorPrimaryDark</item>-->        <!-- ************************  ContentTransition需要的属性  ***********************************  -->        <!-- 5.0系统开始才有的属性， 以前只有windowXXXAnimation。 5.0开始有了Transition，于是有了windowXXXTransition。            windowXXXAnimation是应用在整个window的动画，windowXXXXTransition会对整个window中的每一个view分别应用动画。            windowXXXTransition系列的属性只对Activity起效果，Fragment的XXXTransition和SharedElementXXXTransition需要在代码中进行赋值。-->        <!-- 假设，两个Activity A和B             1. A启动B： A发生exit transition，B发生enter transition             2. B返回A： B发生return transition，A发生reenter transition -->        <!-- 启用Transitions框架和管理器，TransitionManger会默认在界面切换时使用CrossFade效果，该属性内部包含ActivityTransition             windowContentTransitions与windowActivityTransitions的区别详见: https://stackoverflow.com/questions/28975840/feature-activity-transitions-vs-feature-content-transitions -->        <item name="android:windowContentTransitions">true</item>        <!-- 启用Transition框架,但没有默认的动画, 需要通过bundle设定动画，设定false则从ContentTransition中关闭此效果(一般不会设置false)            如果Theme直接继承自Material主题,那么windowActivityTransitions会默认开启,而windowContentTransitions会默认关闭，            原因是自动的淡入淡出动画可能会对某些Application造成困扰，因此它是默认关着的，            但允许直接使用ActivityOptions.makeSceneTransitionAnimation通过bundle使用Transition -->        <item name="android:windowActivityTransitions">true</item><!--        <item name="android:windowEnterTransition">@transition/fade</item>--><!--        <item name="android:windowExitTransition">@transition/fade</item>--><!--        <item name="android:windowReenterTransition">@transition/fade</item>--><!--        <item name="android:windowReturnTransition">@transition/fade</item>-->        <!-- 默认是false, 如果设置成true, 那么enterTransition的启动时间会更早. Overlap:交叠-->        <item name="android:windowAllowEnterTransitionOverlap">false</item>        <item name="android:windowAllowReturnTransitionOverlap">false</item>        <!-- 设置sharedElement控件在window切换时的Transition，只对shareElement有效 -->        <item name="android:windowSharedElementEnterTransition">@transition/change_image_transform</item>        <item name="android:windowSharedElementExitTransition">@transition/change_image_transform</item>        <item name="android:windowSharedElementReenterTransition">@transition/change_image_transform</item>        <item name="android:windowSharedElementReturnTransition">@transition/change_image_transform</item>        <!-- 默认是false, 如果设置成true, 那么enterTransition的启动时间会更早. Overlap:交叠-->        <item name="android:windowSharedElementsUseOverlay">false</item>    </style></resources>